#!/bin/python3

'''
MIT License

Copyright (c) 2024 Josef Utbult

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

import os
import random
import sys
from string import ascii_letters
from xml.etree import ElementTree as ET


def format_description(tag):
    try:
        description = tag.text

        description = description.replace('\n', ' ').replace('\r', '')
        description = ' '.join(description.split())
        description = description.capitalize()

        # This is a weird case for some ESP32 SVD files. The description is just "a"...
        if description == 'A':
            return None

        return description

    except AttributeError:
        return None


def check_name(name):
    ok_letters = ascii_letters + '_0123456789'

    if not all(character in ok_letters for character in name):
        print(f'Non-allowed letters in name "{name}"')
        exit(1)


def build_field(field, register_name, field_index):
    try:
        field_name = field.find("./name").text
        field_offset = field.find("./bitOffset").text
        field_width = field.find("./bitWidth").text
        field_description = format_description(field.find("./description"))
    except AttributeError:
        print(f"Error: Unable to get field name and offset from SVG in register {register_name}, field {field_index}")
        exit(1)

    check_name(field_name)

    return {
        "name": field_name,
        "offset": field_offset,
        "width": field_width,
        "description": field_description
    }


def get_dim(tag, tag_name):
    try:
        dim_count = tag.find("./dim").text
        dim_count = int(dim_count)
    except AttributeError:
        return None, None, None, tag_name
    except ValueError:
        print(f'Error: Unable to convert dim count "{dim_count}" to integer for register {tag_name}')
        exit(1)

    try:
        dim_increment = tag.find("./dimIncrement").text
        if ('0x' in dim_increment or '0X' in dim_increment):
            dim_increment = int(dim_increment, 16)
        else:
            dim_increment = int(dim_increment)
    except AttributeError:
        dim_increment = 1
    except ValueError:
        print(f'Error: Unable to convert dim increment "{dim_increment}" to integer for register {tag_name}')
        exit(1)

    try:
        dim_index_raw = tag.find("./dimIndex").text

        # For dim indices on the form "3-6"
        if '-' in dim_index_raw:
            dim_index_lower, dim_index_upper = dim_index_raw.split("-")

            try:
                dim_index_lower = int(dim_index_lower)
                dim_index_upper = int(dim_index_upper)
            except ValueError:
                print(f'Error: Unable iterate dim index from string "{dim_index_raw}" for register {tag_name}')
                exit(1)

            dim_index = list(range(dim_index_lower, dim_index_upper + 1))

        # For dim indices on the form "A,B,C"
        else:
            dim_index = dim_index_raw.split(',')

        if len(dim_index) != dim_count:
            print(f'Error: Dim indices {dim_index} does not match dim count "{dim_count}" for register {tag_name}')
            exit(1)

    except AttributeError:
        dim_index = None

    tag_name = tag_name.replace("[%s]", "{s}").replace("%s", "{s}")

    return dim_count, dim_increment, dim_index, tag_name


def build_register(register, groups, peripheral_group, register_index):
    try:
        register_name = register.find("./name").text
        register_address_offset = register.find("./addressOffset").text.replace('X', 'x')
        register_description = format_description(register.find("./description"))
    except AttributeError:
        print(f"Error: Unable to get register name and address from SVG in peripheral {peripheral_group}, register {register_index}")
        exit(1)

    dim_count, dim_increment, dim_index, register_name = get_dim(register, register_name)

    try:
        register_access = register.find("./access").text
    except AttributeError:
        register_access = None

    fields = []
    for field in register.findall("./fields/field"):
        fields.append(build_field(field, register_name, len(fields)))

    def add_reg(name, address_offset):
        check_name(name)
        if not name in groups[peripheral_group]:
            groups[peripheral_group][name] = {
                "address": address_offset,
                "description": register_description,
                "fields": fields,
                "access": register_access
            }
            return

        if groups[peripheral_group][name]['address'] != address_offset:
            print(f"ERROR: register {name} in group {peripheral_group} is duplicate, "
                f"but has different address offsets ({groups[peripheral_group][name]['address']} "
                f"and {address_offset})")
            exit(1)


    if dim_count:
        for index in range(dim_count):
            dim_number = index * dim_increment

            if dim_index:
                dim_name = register_name.format(s=dim_index[index])
            else:
                dim_name = register_name.format(s=index)

            try:
                dim_address_offset = hex(int(register_address_offset, 16) + dim_number)
            except ValueError:
                print(f'Error: Unable to add dim number "{dim_number}" to address "{register_address_offset}" for register {dim_name}')
                exit(1)

            add_reg(dim_name, dim_address_offset)

    else:
        add_reg(register_name, register_address_offset)


def filter_by_name(dict_list, name):
    res = list(filter(lambda instance: instance['name'] == name, dict_list))

    if len(res):
        return res

    return None


def build_interrupts(interrupts, peripheral, peripheral_name):
    local_interrupts = peripheral.findall("./interrupt")
    if local_interrupts is None:
        return []

    counter = 0
    for interrupt in local_interrupts:
        try:
            interrupt_name = interrupt.find("./name").text
            check_name(interrupt_name)
            interrupt_number = interrupt.find("./value").text

            try:
                interrupt_number = int(interrupt_number)
            except:
                print(f"Error: Unable to convert interrupt {interrupt_number} to an integer")
                exit(1)

            interrupt_description = format_description(interrupt.find("./description"))

            filtered_local_interrupts = filter_by_name(interrupts, interrupt_name)
            if not filtered_local_interrupts:
                interrupts.append({
                    "name": interrupt_name,
                    "number": interrupt_number,
                    "description": interrupt_description,
                    "valid": True
                })
            elif filtered_local_interrupts[0]['number'] != interrupt_number:
                print(f"Error: Duplicate interrupt name {interrupt_name} in {peripheral_name}, "
                    f"with different interrupt numbers ({interrupt_number} != {filtered_local_interrupts[0]['number']})")
                exit(1)

        except AttributeError:
            print(f"Error: Unable to get name or number from interrupt in peripheral {peripheral_name}, index {counter}")
            exit(1)

        counter += 1


def parse_interrupts(interrupts):

    if not len(interrupts):
        return

    interrupts.sort(key=lambda instance: instance['number'])

    for i in range(interrupts[-1]['number']):
        exists = len(list(filter(lambda instance: instance['number'] == i, interrupts))) > 0
        if not exists:
            interrupts.append({
                "name": "UNKNOWN",
                "number": i,
                "description": "Unknown interrupt",
                "valid": False
            })

    interrupts.sort(key=lambda instance: instance['number'])


def build_structures(root):
    bit_width = root.find("./width").text
    address_type = f"u{bit_width}"

    peripherals = []
    groups = {}
    interrupts = []
    
    for peripheral in root.findall(".//peripheral"):
        try:
            peripheral_name = peripheral.find("./name").text
            peripheral_base_address = peripheral.find("./baseAddress").text.replace('X', 'x')
        except AttributeError:
            print("Failed to get name or base address from peripheral")
            continue

        check_name(peripheral_name)

        try:
            peripheral_desc = format_description(peripheral.find("./description"))
        except AttributeError:
            peripheral_desc = None

        try:
            peripheral_derived_from = peripheral.attrib['derivedFrom']
            peripheral_group = None
        except KeyError:
            peripheral_derived_from = None
            try:
                peripheral_group = peripheral.find("./groupName").text
            except AttributeError:
                peripheral_group = peripheral_name

        build_interrupts(interrupts, peripheral, peripheral_name)

        peripherals.append({
            "name": peripheral_name,
            "group": peripheral_group,
            "derived_from": peripheral_derived_from,
            "address": peripheral_base_address,
            "description": peripheral_desc
        })

        if peripheral_group:
            if not peripheral_group in groups:
                groups[peripheral_group] = {}

            counter = 0
            for register in peripheral.findall(".//register"):
                build_register(register, groups, peripheral_group, counter)
                counter += 1

    parse_interrupts(interrupts)

    return (peripherals, groups, interrupts, address_type)


def link_derived_groups(peripherals):
    for peripheral in peripherals:
        if peripheral['derived_from'] != None:
            derrived_peripheral = peripheral['derived_from']
            found = False
            for search_peripheral in peripherals:
                if search_peripheral['name'] == derrived_peripheral:
                    peripheral['group'] = search_peripheral['group']
                    found = True
                    break
            if not found:
                print(f"Error: Unable to find derived peripheral {derrived_peripheral} for {peripheral['name']}")
                exit(1)


def write_readme(out, peripherals, groups, root_name):
    # Use a set seed so that the script uses the same example at every execution
    seed = 904544808402
    random.seed(seed)

    peripheral = random.choice(peripherals)
    group = groups[peripheral['group']]
    register_name = random.choice(list(group.keys()))
    register = group[register_name]
    field = random.choice(register['fields'])

    register_full_name = f"{peripheral['name'].lower()}::{register_name}"
    field_full_name = f"{peripheral['name'].lower()}::{register_name.lower()}::{field['name'].upper()}"

    readme = \
    f"// +--------------------------------------------------------------------------------+\n" \
    f"// | MIT License                                                                    |\n" \
    f"// |                                                                                |\n" \
    f"// | Copyright (c) 2024 Josef Utbult                                                |\n" \
    f"// |                                                                                |\n" \
    f"// | Permission is hereby granted, free of charge, to any person obtaining a copy   |\n" \
    f"// | of this software and associated documentation files (the \"Software\"), to deal  |\n" \
    f"// | in the Software without restriction, including without limitation the rights   |\n" \
    f"// | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      |\n" \
    f"// | copies of the Software, and to permit persons to whom the Software is          |\n" \
    f"// | furnished to do so, subject to the following conditions:                       |\n" \
    f"// |                                                                                |\n" \
    f"// | The above copyright notice and this permission notice shall be included in all |\n" \
    f"// | copies or substantial portions of the Software.                                |\n" \
    f"// |                                                                                |\n" \
    f"// | THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     |\n" \
    f"// | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       |\n" \
    f"// | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    |\n" \
    f"// | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         |\n" \
    f"// | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  |\n" \
    f"// | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  |\n" \
    f"// | SOFTWARE.                                                                      |\n" \
    f"// +--------------------------------------------------------------------------------+\n" \
    f"\n" \
    f"//! # {root_name} Register Map\n" \
    f"//!\n" \
    f"//! This file is auto generated by\n" \
    f"//! [svdToRustRegisterMap](https://github.com/JosefUtbult/svdToRustRegisterMap).\n" \
    f"//! These registry maps can be used for integrating with bare metal hardware in an\n" \
    f"//! minimal-abstraction fashion. **This should not be used if you don't know what\n" \
    f"//! you're doing, as this approach disregards all compile-time and run-time\n" \
    f"//! securities, in favour of a more manual approach**. If you're not sure about\n" \
    f"//! this kind of stuff, you should probably be using a full-fetched HAL, such as\n" \
    f"//! the [stm32f4xx-hal](https://github.com/stm32-rs/stm32f4xx-hal) or\n" \
    f"//! [esp-hal](https://github.com/esp-rs/esp-hal). Another good alternative to this\n" \
    f"//! method for STM32 processors is\n" \
    f"//! [stm32ral](https://github.com/adamgreig/stm32ral), which supplies a Register\n" \
    f"//! Access Layer in the form of structs.\n" \
    f"//!\n" \
    f"//! **Example:**\n" \
    f"//!\n" \
    f"//! You can read from a register using `read_volatile`, and mask the value with the included fields\n" \
    f"//! ```\n" \
    f"//! use core::ptr::read_volatile;\n" \
    f"//! unsafe {{ read_volatile({register_full_name}) & (0b1 << {field_full_name}) }}\n" \
    f"//! ```\n" \
    f"//!\n" \
    f"//! You can write to a register using `write_volatile` and use the included fields to shift into\n" \
    f"//! the correct position\n" \
    f"//! ```\n" \
    f"//! use core::ptr::write_volatile;\n" \
    f"//! unsafe {{ write_volatile({register_full_name}, 0b1 << {field_full_name}); }}\n" \
    f"//! ```\n" \
    f"//!\n" \
    f"//! You can combine the two to add to a populated register\n" \
    f"//! ```\n" \
    f"//! use core::ptr::{{read_volatile, write_volatile}};\n" \
    f"//! unsafe {{\n" \
    f"//!     write_volatile(\n" \
    f"//!         {register_full_name},\n" \
    f"//!         read_volatile({register_full_name}) | (0b1 << {field_full_name})\n" \
    f"//!     );\n" \
    f"//! }}\n" \
    f"//! ```\n" \
    f"\n"

    out.write(readme)


def format_lines(lines, split, spaces_before = True):
    max_len = 0;
    for line in lines:
        if "///" in line:
            continue
        try:
            head, tail = line.split(split)
        except ValueError:
            continue

        max_len = max(max_len, len(head))

    for index in range(len(lines)):
        if "///" in lines[index]:
            continue
        try:
            head, tail = lines[index].split(split)
        except ValueError:
            continue

        spaces = max_len - len(head);

        if spaces_before:
            head += ' ' * spaces + split
        else:
            head += split + ' ' * spaces

        lines[index] = head + tail


def pad_hex_addresses(data):
    def recursivly_find_address(instance, on_address):
        if type(instance) is dict:
            for key in instance:
                if key == 'address':
                    res = on_address(instance[key])
                    if not res is None:
                        instance[key] = res

                else:
                    recursivly_find_address(instance[key], on_address)

        elif type(instance) is list:
            for item in instance:
                recursivly_find_address(item, on_address)

    all_addresses = []
    recursivly_find_address(
        data,
        lambda address: all_addresses.append(address)
    )

    max_digit_length = max(len(address) for address in all_addresses) - 2

    def pad_address_instance(address):
        try:
            _, tail = address.split("0x")
        except ValueError:
            print(f'Warning: Non-hex address "{address}" found')
            return

        additional_zeros = max_digit_length - len(tail)
        return "0x" + '0' * additional_zeros + tail

    recursivly_find_address(
        data,
        pad_address_instance
    )


def write_global_peripherals(lines, peripherals, address_type):
    pad_hex_addresses(peripherals)

    lines.append("#[rustfmt::skip]\n")
    lines.append("mod peripherals {\n")
    for peripheral in peripherals:
        peripheral_name = f"{peripheral['name'].upper()}_ADDR"
        lines.append(f"    pub const {peripheral_name}: {address_type} = {peripheral['address']};\n")

    lines.append("}\n\n")


def write_groups(lines, groups, address_type):
    pad_hex_addresses(groups)
    for group in groups:
        registers = groups[group]
        mod_name = f"{group.lower()}_registers"

        lines.append("#[rustfmt::skip]\n")
        lines.append(f"mod {mod_name} {{\n")
        for register in registers:
            offset_name = f"{register.upper()}_ADDR"
            lines.append(f"    pub const {offset_name}: {address_type} = {registers[register]['address']};\n")

        lines.append("}\n\n")


def write_fields(lines, fields, field_mod):
    if not len(fields):
        return

    lines.append(f"    pub mod {field_mod} {{\n")
    for field in fields:
        field_name = field['name'].upper();

        if field['description']:
            lines.append(f"        /// {field['description']}\n")
        if field['width']:
            lines.append(f"        /// Bit width: {field['width']}\n")
        lines.append(f"        pub const {field_name}: u8 = {field['offset']};\n")

        if field != fields[-1]:
            lines.append("\n")

    lines.append("    }\n")


def write_interrupts(lines, interrupts, address_type):
    if not len(interrupts):
        return

    lines.append("#[rustfmt::skip]\n")
    lines.append("#[allow(unused)]\n")
    lines.append(f"pub mod irq {{\n")

    for interrupt in interrupts:
        lines.append("\n")

        interrupt_description = interrupt['description']
        if interrupt_description:
            comment_type = "//" if not interrupt['valid'] else "///"
            lines.append(f"    {comment_type} {interrupt_description}\n")

        comment_out = "//" if not interrupt['valid'] else ""
        interrupt_name = f"{interrupt['name'].upper()}_IRQ"
        lines.append(f"    {comment_out}pub const {interrupt_name}: {address_type} = {interrupt['number']};\n")

    lines.append("}\n\n")


def write_peripherals(lines, peripherals, address_type):
    for peripheral in peripherals:
        group = peripheral['group']
        registers = groups[group]

        mod_name = f"{group.lower()}_registers"

        if peripheral['description']:
            lines.append(f"/// {peripheral['description']}\n")

        lines.append("#[rustfmt::skip]\n")
        lines.append("#[allow(unused)]\n")
        lines.append(f"pub mod {peripheral['name'].lower()} {{\n")
        lines.append(f"    use super::{{peripherals, {mod_name}}};\n")

        for register in registers:
            peripheral_name = f"peripherals::{peripheral['name'].upper()}_ADDR"
            offset_name = f"{mod_name}::{register.upper()}_ADDR"
            res_name = register.upper()
            field_mod = register.lower()
            description = registers[register]['description']

            lines.append("\n")
            if description:
                lines.append(f"    /// {description}\n")
            if registers[register]['access']:
                lines.append(f"    /// Access: {registers[register]['access']}\n")
            lines.append(f"    pub const {res_name}: *mut {address_type} = ({peripheral_name} + {offset_name}) as *mut {address_type};\n")

            write_fields(lines, registers[register]['fields'], field_mod)

        lines.append("}\n\n")

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print(f"Usage: register_map <input_file>.svg")
        exit(1)

    input_file = sys.argv[1]
    input_file_name = os.path.splitext(os.path.basename(input_file))[0]
    output_file = f"{input_file_name.lower().replace(' ', '_').replace('-', '_')}.rs"
    tree = ET.parse(input_file)
    out = open(output_file, "w")

    root = tree.getroot()
    peripherals, groups, interrupts, address_type = build_structures(root)
    link_derived_groups(peripherals)

    root_name = root.find("./name").text

    write_readme(out, peripherals, groups, root_name)

    address_lines = []
    write_global_peripherals(address_lines, peripherals, address_type)
    write_groups(address_lines, groups, address_type)
    format_lines(address_lines, ':', spaces_before=False)
    for line in address_lines:
        out.write(line)

    peripheral_lines = []
    write_interrupts(peripheral_lines, interrupts, address_type)
    write_peripherals(peripheral_lines, peripherals, address_type)
    for line in peripheral_lines:
        out.write(line)

    print(f'Generated "{output_file}"')
    out.close()
